import { NextRequest, NextResponse } from 'next/server';
import { ensureValidToken } from '@/lib/ensureXeroToken';
import { trackXeroApiCall } from '@/lib/xeroApiTracker';
import { SmartRateLimit } from '@/lib/smartRateLimit';
import { auth } from '@/lib/auth';
import { AuditLogger } from '@/lib/auditLogger';
import * as XLSX from 'xlsx';

/**
 * GET /api/xero/quotes/download - Download accepted Xero quotes as Excel file
 */
export async function GET(request: NextRequest) {
  // Initialize audit logger
  const session = await auth();
  const { access_token, effective_tenant_id, available_tenants } = await ensureValidToken();
  const selectedTenant = available_tenants?.find(t => t.tenantId === effective_tenant_id);
  const auditLogger = new AuditLogger(session, effective_tenant_id, selectedTenant?.tenantName);
  
  let downloadLogId: string | null = null;
  
  try {
    // Log the download attempt
    downloadLogId = await auditLogger.startAction('PROJECT_UPDATE', {
      action: 'DOWNLOAD_ACCEPTED_QUOTES'
    });
    
    await SmartRateLimit.waitIfNeeded();
    
    const url = 'https://api.xero.com/api.xro/2.0/Quotes?Status=ACCEPTED';
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${access_token}`,
        'Xero-tenant-id': effective_tenant_id,
        'Accept': 'application/json'
      }
    });

    await trackXeroApiCall(response.headers, effective_tenant_id);
    SmartRateLimit.updateFromHeaders(response.headers);

    if (!response.ok) {
      const errorText = await response.text();
      
      // Complete audit log with failure
      if (downloadLogId) {
        await auditLogger.completeAction(
          downloadLogId,
          'FAILURE',
          {
            httpStatus: response.status,
            error: errorText
          },
          `HTTP ${response.status}: ${errorText}`
        );
      }
      
      return NextResponse.json({ 
        error: `Failed to fetch quotes: ${response.status} ${errorText}` 
      }, { status: response.status });
    }

    const result = await response.json();
    const quotes = result.Quotes || [];

    // Create Excel workbook
    const workbook = XLSX.utils.book_new();
    
    // Create summary sheet
    const timestamp = new Date();
    const summaryData = [
      ['Xero Accepted Quotes Export'],
      [''],
      ['Export Information'],
      ['Generated By', session?.user?.name || session?.user?.email || 'System'],
      ['User Email', session?.user?.email || 'Unknown'],
      ['Organisation', selectedTenant?.tenantName || 'Unknown'],
      ['Tenant ID', effective_tenant_id],
      ['Generated On', timestamp.toLocaleString()],
      ['Total Accepted Quotes', quotes.length],
      ['Status Filter', 'ACCEPTED'],
      [''],
      ['Export Summary'],
      ['Quote Count', quotes.length],
      ['Export Format', 'Microsoft Excel (.xlsx)'],
      ['Data Source', 'Xero Quotes API'],
      ['Last Updated', timestamp.toISOString()]
    ];

    const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');

    // Create quotes data sheet
    if (quotes.length > 0) {
      // Prepare quotes data for Excel
      const quotesData = [
        [
          'No.',
          'Quote ID',
          'Quote Number', 
          'Reference',
          'Contact Name',
          'Total Amount',
          'Currency',
          'Date',
          'Status',
          'Updated Date'
        ]
      ];

      quotes.forEach((quote: any, index: number) => {
        quotesData.push([
          (index + 1).toString(),
          quote.QuoteID || '',
          quote.QuoteNumber || 'N/A',
          quote.Reference || '',
          quote.Contact?.Name || '',
          quote.Total || 0,
          quote.CurrencyCode || '',
          quote.DateString ? new Date(quote.DateString).toLocaleDateString() : '',
          quote.Status || '',
          quote.UpdatedDateUTC ? new Date(quote.UpdatedDateUTC).toLocaleDateString() : ''
        ]);
      });

      const quotesSheet = XLSX.utils.aoa_to_sheet(quotesData);
      XLSX.utils.book_append_sheet(workbook, quotesSheet, 'Accepted Quotes');
    }

    // Generate Excel file
    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });
    
    // Generate filename with timestamp
    const fileTimestamp = timestamp.toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const filename = `xero-accepted-quotes-export-${fileTimestamp}.xlsx`;

    // Complete audit log with success
    if (downloadLogId) {
      await auditLogger.completeAction(
        downloadLogId,
        'SUCCESS',
        {
          quotesCount: quotes.length,
          filename: filename
        }
      );
    }

    // Return Excel file
    return new NextResponse(excelBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Cache-Control': 'no-cache',
        'Content-Length': excelBuffer.length.toString()
      },
    });
    
  } catch (error: any) {
    console.error('[Quotes Download API] Error:', error);
    
    // Complete audit log with failure
    if (downloadLogId) {
      await auditLogger.completeAction(
        downloadLogId,
        'FAILURE',
        {
          error: error.message
        },
        error.message
      );
    }
    
    return NextResponse.json({ 
      error: error.message || 'An error occurred while downloading quotes' 
    }, { status: 500 });
  }
} 